# TODO: 1. Calculate raw material demands
# TODO: 4. Calculate the number of nails required for all of this
BLACK = 0
WHITE = 1

size(800, 1800)
background(WHITE)
fill(0,.5)


# lines
stroke(BLACK)

scale = 0.2

translate(10,10)

largest_length_mm = 1900
piece_length_mm = 1000
piece_leftover_length_mm = largest_length_mm - piece_length_mm
height_mm = 700

sheet_thickness_mm = 18
bar_thickness_mm = 50

b1_length_mm = largest_length_mm - sheet_thickness_mm - bar_thickness_mm
b2_length_mm = piece_length_mm - bar_thickness_mm * 2
b3_length_mm = largest_length_mm - b2_length_mm - 3 * bar_thickness_mm - sheet_thickness_mm
b4_length_mm = piece_length_mm - sheet_thickness_mm

b5_length_mm = height_mm - 2 * bar_thickness_mm

bar_thickness = bar_thickness_mm * scale
b1_length = b1_length_mm * scale
b2_length = b2_length_mm * scale
b3_length = b3_length_mm * scale
b4_length = b4_length_mm * scale
b5_length = b5_length_mm * scale

sheet_thickness = sheet_thickness_mm * scale
largest_length = largest_length_mm * scale
piece_length = piece_length_mm * scale
piece_leftover_length = piece_leftover_length_mm * scale

HORIZONTAL = 1
VERTICAL = 0

RIGHT = 1
UP = 2
DOWN = 3
LEFT = 4

DOWN_LEFT = 5
DOWN_RIGHT = 6
UP_LEFT = 7
UP_RIGHT = 8

# drawing also adds entries to this
materials = []

class Sheet(object):
    def __init__(self, name, width, height, thickness):
        self.width = width
        self.height = height
        self.thickness = thickness
        self.name = name
        
    def surface_area(self):
        return self.width * self.height
        
    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False

        return self.name == other.name

    def __hash__(self):
        return hash(self.name)

    def __str__(self):
        return "(%s) %s*%s*%s" % (
            self.name, 
            self.width,
            self.height,
            self.thickness)

    def __lt__(self, other):
        return self.name < other.name
        
class Bar(object):
    def __init__(self, name, length, thickness):
        self.name = name
        self.length = length
        self.thickness = thickness
        
    def length():
        return length

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False

        return self.name == other.name
        
    def __hash__(self):
        return hash(self.name)

    def __str__(self):
        return "(%s) %s*%s*%s" % (
            self.name, 
            self.length,
            self.thickness,
            self.thickness)

    def __lt__(self, other):
        return self.name < other.name

    def surface_area(self):
        return self.thickness*self.thickness*2 + 4*self.thickness*self.length
        
class Connector(object):
    def __init__(self, name, description):
        self.name = name
        self.description = description

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False

        return self.name == other.name
        
    def __hash__(self):
        return hash(self.name)

    def __str__(self):
        return "(%s) %s" % (self.name, self.description)

    def __lt__(self, other):
        return self.name < other.name

def draw_piece(name, length, thick, orientation, tip=True):
    if (orientation == HORIZONTAL):
        rect(0,0, length, thick)
    else:
        rect(0,0, thick, length)
    with fill(0):
        if (tip):
            if (orientation == HORIZONTAL):
                text(name, length/2 + thick*5, thick)
            else:
                text(name, 0, length/2 + thick*5)

def draw_sheet(name, length, orientation):
    materials.append(Sheet(name, int(length/scale), height_mm, sheet_thickness_mm))
    draw_piece(name, length, sheet_thickness, orientation)

def draw_bar(name, length, orientation, tip=True):
    materials.append(Bar(name, int(length/scale), bar_thickness_mm))
    draw_piece(name, length, bar_thickness, orientation, tip)
    
def draw_bars():
    push()
    draw_bar("b1", b1_length, HORIZONTAL)
    with translate(bar_thickness, bar_thickness):
        draw_long_nail(DOWN_RIGHT)
    with translate(b2_length + bar_thickness, bar_thickness):
        draw_long_nail(DOWN_LEFT)

    translate(0, bar_thickness)
    draw_bar("b1", b1_length, VERTICAL)
    translate(bar_thickness, 0)
    
    translate(b2_length, 0)
    draw_bar("b1", b1_length, VERTICAL)
    
    translate(-b2_length, b1_length - bar_thickness)
    draw_bar("b2", b2_length, HORIZONTAL)
    draw_long_nail(UP_RIGHT)
    with translate(b2_length, 0):
        draw_long_nail(UP_LEFT)

    translate(0, -b1_length + bar_thickness + b2_length - sheet_thickness)
    draw_bar("b2", b2_length, HORIZONTAL)
    with translate(0, bar_thickness):
        draw_long_nail(DOWN_RIGHT)
    
    translate(b2_length + bar_thickness)
    draw_bar("b3", b3_length, HORIZONTAL)
    with translate(-bar_thickness, bar_thickness):
        draw_long_nail(DOWN_LEFT)
    
    translate(b3_length, -b2_length-bar_thickness+sheet_thickness)
    draw_bar("b4", b4_length, VERTICAL)

    with translate(0, bar_thickness):
        draw_long_nail(DOWN_LEFT)
    with translate(0, b4_length-bar_thickness):
        draw_long_nail(UP_LEFT)
    
    pop()

def draw_sheets():
    push()
    draw_sheet("s1", largest_length, HORIZONTAL)
    
    translate(+0, +sheet_thickness)
    draw_sheet("s1", largest_length, VERTICAL)
    
    translate(+sheet_thickness, +largest_length - sheet_thickness)
    draw_sheet("s2", piece_length, HORIZONTAL)
    
    translate(+piece_length, -piece_leftover_length + sheet_thickness)
    draw_sheet("s3", piece_leftover_length, VERTICAL)
    
    translate(0, -sheet_thickness)
    draw_sheet("s3", piece_leftover_length, HORIZONTAL)
    
    translate(piece_leftover_length - sheet_thickness, -piece_length)
    draw_sheet("s2", piece_length, VERTICAL)
    
    translate(-largest_length)
    pop()

def print_bill():
    from collections import Counter
    from operator import itemgetter
    counter = Counter(materials)
    
    bill_str = ""
    for item, value in sorted(counter.items(), key=itemgetter(0)):
        bill_str += str(item) + " -> " + str(value) +" шт.\n"
    
    fill(0)
    text("Частини:\n" + bill_str, 50, 30)
    
def draw_pillar_projection(tip=False):
    rect(0, 0, bar_thickness, bar_thickness)
    if (tip):
        text("b5", 10,0)
    
def draw_pillar_projections():
    # leftmost
    draw_pillar_projection()
    with translate(0, b4_length-bar_thickness):
        draw_pillar_projection()
    with translate(0, b1_length):
        draw_pillar_projection()

    # middle
    with translate(b2_length + bar_thickness, 0):
        draw_pillar_projection()
        with translate(0, b4_length):
            draw_pillar_projection()
        with translate(bar_thickness, b4_length - bar_thickness):
            draw_pillar_projection()
        with translate(0, b1_length):
            draw_pillar_projection()

    # rightmost 2
    with translate(b1_length, 0):
        draw_pillar_projection(tip=True)
        with translate(0, b4_length-bar_thickness):
            draw_pillar_projection()

# At first I thought of nails piercing the wood along the length
# Now we use a corner-like piece of metal + 2 nails doing perpendicular which solves the trick of the center crossection
# plus it seems to be much easier in construction
def draw_long_nail(orientation):
    materials.append(Connector("z1", "шуруп для куточка"))
    materials.append(Connector("z1", "шуруп для куточка"))
    materials.append(Connector("z2", "куточок"))
    with stroke(0,0,1):
        beginpath()
        shift = bar_thickness/2
        length = bar_thickness
        if orientation == DOWN_LEFT:
            moveto(-length, 0)
            lineto(0, 0)
            lineto(0, length)
        elif orientation == DOWN_RIGHT:
            moveto(length, 0)
            lineto(0, 0)
            lineto(0, length)
        elif orientation == UP_LEFT:
            moveto(-length, 0)
            lineto(0, 0)
            lineto(0, -length)
        elif orientation == UP_RIGHT:
            moveto(length, 0)
            lineto(0,0)
            lineto(0, -length)
        elif orientation == UP:
            moveto(shift, 0)
            lineto(shift, -length)
        elif orientation == RIGHT:
            moveto(0, shift)
            lineto(length, shift)
        elif orientation == LEFT:
            moveto(0, shift)
            lineto(-length, shift)
        else:
            raise ValueError()
        endpath()

def draw_pillars():
    translate(largest_length + 50, 20)
    text("Вертикальні стійки (b5)", 0, 0)
    translate(20, 20)
    for i in range(0, 8):
        draw_bar("b5", b5_length, VERTICAL, tip=False)
        draw_long_nail(DOWN_LEFT)
        with translate(bar_thickness, 0):
            draw_long_nail(DOWN_RIGHT)
        with translate(0, b5_length):
            draw_long_nail(UP_LEFT)
            with translate(bar_thickness, 0):
                draw_long_nail(UP_RIGHT)
        translate(bar_thickness*4, 0);
        
def calculate_sheet_area():
    area = 0
    for item in materials:
        if isinstance(item, Sheet):
            area += item.surface_area()
        
    return area

def calculate_bar_area():
    area = 0
    for item in materials:
        if isinstance(item, Bar):
            area += item.surface_area()
        
    return area

def print_surface_area():
    area_text = "Площа:\n";
    sheet_area = calculate_sheet_area()
    sheet_area_m2 = sheet_area / 1000000.0
    bar_area = calculate_bar_area()
    bar_area_m2 = bar_area / 1000000.0
    area_text += "* Фанєрка, м2: %s\n" % str(sheet_area_m2)
    area_text += "* З обох сторін: %s\n" % str(sheet_area_m2*2)
    area_text += "* Брус: %s\n" % str(bar_area_m2)
    total_area_m2 = sheet_area_m2 * 2 + bar_area_m2
    area_text += "Всього: %s" % total_area_m2
    text(area_text, 50, 0)


# ----
# Higher level drawing starts here
# ----
push()
text("Вид згори. Каркас + обшивка", 20, 50)
draw_sheets()
translate(sheet_thickness, sheet_thickness)
draw_bars()

translate(0, largest_length + 10)
text("Вид згори, 2ий слой каркасу\n + проекціі вертікальних стійок (b5)", 20, 50)
draw_bars()
draw_pillar_projections()
pop()

push()
draw_pillars()
pop()

translate(largest_length, largest_length/2)
print_bill()

translate(0, largest_length)
print_surface_area()
